[
["index.html", "Principles for modelling packages Chapter 1 Intro", " Principles for modelling packages TBD 2018-07-06 Chapter 1 Intro Rule 1: Always spell it modelling, never modeling. "],
["conceptual-overview-of-modelling.html", "Chapter 2 Conceptual overview of modelling", " Chapter 2 Conceptual overview of modelling what is a model: models, estimands, estimators and model specifications what do we do with models how do fit models once we have a fit model, how do we predict or do inference the difference between working with a single fit vs a set of fits. LASSO example: wanting to use the coefficients for prediction vs wanting to see the order in which features enter the model "],
["danger-zone.html", "Chapter 3 Danger Zone", " Chapter 3 Danger Zone little things to include somewhere: - the danger of misspecified arguments disappearing into ... "],
["data-specification.html", "Chapter 4 Data Specification", " Chapter 4 Data Specification formulas, model.frame, term objects, etc data / design matrix specification - recipes habit: get the df right, then y ~ . in the formula. would be nice to still see the features in the call? ask users to use data.frames and tibbles, not matrices. "],
["documentation.html", "Chapter 5 Documentation", " Chapter 5 Documentation vignette should include not only the coefficients as output in an example, but also those coefficients written up as a general latex model and as a latex model with those specific coefficients substituted in show your example data in the README so users immediately see the structure function to write out model form and fitted model in latex for sanity checking: some sort of model_report / model_form generic it’s a bad idea to expect users to learn the math for your model from function level documentation, or math presented in ascii or unicode or poorly rendered latex. show write out the math in a nicely formatted vignette, and then clearly describe the connection between code objects and math objects there as well "],
["functional-programming-principles.html", "Chapter 6 Functional programming principles", " Chapter 6 Functional programming principles calls to fit should be pure: i.e. no side effects like plotting, and especially no plotting with invisible object return - side effects: useful in interactive mode, irritating in programmatic mode type safety, particularly of returned objects type safety with respect to single fits vs sets of fits "],
["implementation.html", "Chapter 7 Implementation", " Chapter 7 Implementation argument matching for categorical choices "],
["interactive-modelling.html", "Chapter 8 Interactive modelling", " Chapter 8 Interactive modelling what most people do different because there’s a person looking at stuff as opposed to programmatic model when it’s just code interacting with the model with no human involved this is a chapter mostly to remind us to think of differences between the two and how they might be important in terms of interface "],
["interface.html", "Chapter 9 Interface", " Chapter 9 Interface user friendly interfaces good and bad existing idioms methods to implement examples of tried and true workflows methods to implement - note on plotting: Should be easy to get the values plotted so others can make their own plots TWO DISTINCT ISSUES THAT GET RESOLVED IN FORMULAE: design matrix specification model specification. (a la fGarch::garchFit(~arma(1, 1) + garch(1, 0))) "],
["low-and-high-level-interfaces.html", "Chapter 10 Low and high level interfaces", " Chapter 10 Low and high level interfaces high level versus low level interface programmatic versus interactive use when you should use which examples: - high level: keras, brms - low level: tensorflow, stan "],
["model-objects.html", "Chapter 11 Model objects", " Chapter 11 Model objects some explanation of why and how to save the function call generally what kinds of things should go into a model object, giving model objects a class so other people can extend them S3 object creation and validation for model building a la Advanced R Model classes beyond lists. when is S4 worth it? when is R6? Every modeling function should include its package version in its data object I will now save my models as a list of three objects: model, data, and sessioninfo::session_info() "],
["programmatic-modelling.html", "Chapter 12 Programmatic modelling", " Chapter 12 Programmatic modelling i.e. interacting with models programmatically examples: - packages that export a model from someone to use a la botornot - models sitting behind a Plumber API - etc "],
["references.html", "Chapter 13 References", " Chapter 13 References bdr’s model fitting functions in r "],
["testing.html", "Chapter 14 Testing", " Chapter 14 Testing testing against existing software - say a Matlab implementation saving long running models in R/sysdata.rda with usethis::use_data(model_obj, internal = TRUE) "],
["workflow.html", "Chapter 15 Workflow 15.1 Prediction 15.2 Inference", " Chapter 15 Workflow 15.1 Prediction feature engineering ML wizardry more feature engineering ??? predictions 15.2 Inference Clean data Specify model Fit model Check that model fitting process converged / worked Check statistical assumptions of model KEY part that always gets left out: working with multiple modellings "]
]
